/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pkgVista;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import pkgExcepciones.AeropuertoPosicionSobreLineaException;
import pkgModelo.Aeronave;
import pkgModelo.Juego;
import pkgModelo.Espacio;
import pkgModelo.Nodo;
import pkgModelo.Reloj;

/**
 * Clase que modela un PanelJuego y hereda de JPanel
 * @author Juan C. Alvarez & Andres R. Alvarez
 */
public class PanelJuego extends javax.swing.JPanel implements MouseMotionListener, MouseListener, KeyListener {

    private Ventana padre;
    private boolean agregando;
    private boolean modoManual = true;
    private boolean pilotoAutomatico;
    private ImageIcon aeropuerto;
    private Point posicionAero;
    private Juego juego;
    private CreadorAeropuerto creadorAeropuerto;

    /**
     * Creates new form PanelJuego
     */
    public PanelJuego(Ventana padre) {
        this.padre = padre;
        initComponents();
        setBounds(0, 0, 900, 660);
        aeropuerto = new ImageIcon(this.getClass().getClassLoader().getResource("pkgSprites/Aeropuerto/hangar.png"));
        juego = new Juego(this,null);
        //System.out.println("SE SUPONE SE CREA JUAGO!!! CON MAPA::NULL?? "+juego.getEspacio()==null);
        juego.setReloj(new Reloj(Integer.parseInt(padre.getjLabel2().getText()), juego));
        addMouseMotionListener(this);
        addMouseListener(this);
        addKeyListener(this);
        setFocusable(true); //necesario para mantener el foco en el panel para eventos del teclado
        setBackground(new Color(103, 186, 226));
        setOpaque(true);
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        
        juego.paint((Graphics2D) g);
        
        if (agregando)
            aeropuerto.paintIcon(this, g, posicionAero.x, posicionAero.y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 660, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
        if (agregando) {
            Nodo casillaAgregar = Espacio.buscarCasillaPosicion(e.getPoint(), juego.getEspacio().getMapa());
            try {
                if (juego.posicionCorrecta(casillaAgregar.getPosicion())) {
                    if (juego.buscarAeropuerto(casillaAgregar.getPosicion()) == null) {
                        agregando = false;
                        creadorAeropuerto = new CreadorAeropuerto(this, casillaAgregar);
                    } else {
                        JOptionPane.showMessageDialog(this, "Ya hay un aeropuerto ocupando esta casilla, elija otra posicion", "No se puede ubicar aqui", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (AeropuertoPosicionSobreLineaException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }       
        }
        requestFocusInWindow(); //necesario para mantener el foco en el panel para eventos del teclado
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //if(modoManual == true) {
        if(padre.getRadioManual().isSelected()) {
            if((e.getModifiers() & InputEvent.BUTTON1_MASK) == InputEvent.BUTTON1_MASK){
                Point puntoSeleccion = new Point((int)e.getX(), (int)e.getY());
                juego.seleccionarAeronave(puntoSeleccion);
                if(juego.seleccionarAeropuerto(puntoSeleccion) != null)
                    juego.seleccionarAeropuerto(puntoSeleccion).setSeleccion(false);
            }
            else {
                Point destino = new Point((int)e.getX(), (int)e.getY());
                Aeronave aeronave = juego.buscarAeronaveSeleccionada();
                if(aeronave != null) {
                    aeronave.setPosicionFinal(destino);
                    if(juego.seleccionarAeropuerto(destino) != null) {
                        aeronave.setOrdenAterrizaje(true);
                        juego.seleccionarAeropuerto(destino);
                    }
                    else {
                        
                        aeronave.setOrdenAterrizaje(false);
                    }
                }
            }
            repaint();
        }
//        else {
//            Point puntoSeleccion = new Point((int)e.getX(), (int)e.getY());
//            juego.seleccionarAeronave(puntoSeleccion);
//            if(juego.seleccionarAeropuerto(puntoSeleccion) != null)
//                juego.seleccionarAeropuerto(puntoSeleccion).setSeleccion(false);
//        }
        requestFocusInWindow(); //necesario para mantener el foco en el panel para eventos del teclado
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mouseDragged(MouseEvent e) {
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        if (agregando) {
            posicionAero = new Point(e.getX() - 29, e.getY() - 18);
            repaint();
        }
    }

    public Ventana getPadre() {
        return padre;
    }

    public void setPadre(Ventana padre) {
        this.padre = padre;
    }

    public boolean isAgregando() {
        return agregando;
    }

    public void setAgregando(boolean agregando) {
        this.agregando = agregando;
    }

    public ImageIcon getAeropuerto() {
        return aeropuerto;
    }

    public void setAeropuerto(ImageIcon aeropuerto) {
        this.aeropuerto = aeropuerto;
    }

    public Point getPosicionAero() {
        return posicionAero;
    }

    public void setPosicionAero(Point posicionAero) {
        this.posicionAero = posicionAero;
    }

    public Espacio getMapa() {
        return juego.getEspacio();
    }

    public Juego getJuego() {
        return juego;
    }

    public void setJuego(Juego juego) {
        this.juego = juego;
    }

    public void setMapa(Espacio mapa) {
        juego.setEspacio(mapa);
    }

    public CreadorAeropuerto getCreadorAeropuerto() {
        return creadorAeropuerto;
    }

    public void setCreadorAeropuerto(CreadorAeropuerto creadorAeropuerto) {
        this.creadorAeropuerto = creadorAeropuerto;
    }

    /**
     * @return the modoManual
     */
    public boolean isModoManual() {
        return modoManual;
    }

    /**
     * @param modoManual the modoManual to set
     */
    public void setModoManual(boolean modoManual) {
        this.modoManual = modoManual;
    }

    /**
     * @return the pilotoAutomatico
     */
    public boolean isPilotoAutomatico() {
        return pilotoAutomatico;
    }

    /**
     * @param pilotoAutomatico the pilotoAutomatico to set
     */
    public void setPilotoAutomatico(boolean pilotoAutomatico) {
        this.pilotoAutomatico = pilotoAutomatico;
    }

    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_UP:
                juego.subirAlturaAeronave();
                break;
            case KeyEvent.VK_DOWN:
                juego.bajarAlturaAeronave();
                break;
            case KeyEvent.VK_LEFT:
                juego.subirVelocidadAeronave();
                break;
            case KeyEvent.VK_RIGHT:
                juego.bajarVelocidadAeronave();
                break;
            default:
                break;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public void gameOver(){
        JLabel asd = padre.getLblTiempo();
        asd.setText("0:00");
        padre.setLblTiempo(asd);
        new FinDelJuego(padre.getLblPuntaje().getText());
    }
}
